Update(Put) is different from Create in a couple of ways. We have to be able to send up the Id, 
we need to be able to identify an existing record somehow in the database, and Id makes sense to do so.
Note that when we update we need to update the entire record. We need to search for the record,
that's why we use both HttpPut and Route attributes.
Entity Framework is tracking Update just like it does Create.

1. First we will create a new Dto, call it UpdatePostRequestDto.cs inside Dtos folder.
2. Copy the Properties inside the CreatePostRequestDto because that's the Properties we will update.
    It should look like this:
    public class CreatePostRequestDto
    {
        public DateTime CreatedOn { get; set; } = DateTime.Now;
        public string Title { get; set; } = string.Empty;
        public string Body { get; set; } = string.Empty;
    }
3. Create a new IActionResult method inside PostController that we call Update
    It should look like this:
        [HttpPut]
        [Route("{id}")]
        public IActionResult Update([FromRoute] int id, [FromBody] UpdatePostRequestDto updateDto)
        {
            var postModel = _context.Posts.FirstOrDefault(x => x.Id == id);
            if (postModel == null)
            {
                return NotFound();
            }

            postModel.Title = updateDto.Title;
            postModel.Body = updateDto.Body;
            postModel.CreatedOn = updateDto.CreatedOn;

            
        }
    
    What we're doing is creating a postModel variable that gets the id from Route.
    We're going to use our updateDto to update the entire object and Entity Framework tracks this update, that is our _context.
    Then we need to save the changes so that our database updates this record.
    Then we return the Ok IActionResult with our ToPostDto.

    That should be it and we can try it out using dotnet watch run.
    Get an id and change some values in our newly created Put