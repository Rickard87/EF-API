We are going to submit JSON to the server and then the server will use the code that we wrote to put the data inside the database.
That is practially what happens, with some logic in between.
We will put our JSON data inside the Entity Framework's Add()-function
Entity Framework will start tracking the data (it is not saved into the database yet)
For that we will have to use Entity Framework's SaveChanges()

1. First we will create a new Dto, call it CreatePostRequestDto.cs inside Dtos folder.
2. Copy the Properties from Post.cs in Models, but we will not use all of it.
3. Exclude the Comments list and Id, we do not want to POST(Create) those, that's what we have Dtos for. We will also remove any attributes attached to the Model if you have any.
    It should look like this:
    public class CreatePostRequestDto
    {
        public DateTime CreatedOn { get; set; } = DateTime.Now;
        public string Title { get; set; } = string.Empty;
        public string Body { get; set; } = string.Empty;
    }
4. Now create a Mapper for out POST(Create) called ToPostFromCreatePost inside out Post.cs in folder Models
    We cannot Add() in the form of a Dto, we have to return our Post Model BUT we will only Post what is in our Dto
    It should look like this:
    public static Post ToPostFromCreateDto(this CreatePostRequestDto postDto)
        {
            return new Post
            {
                Title = postDto.Title,
                Body = postDto.Body,
                CreatedOn = postDto.CreatedOn
            };
        }
5. We will go into our api/Controllers/PostController.cs and start building our Post.
    So what we're doing is a new HttpPost attribute with IActionResult. We will use FromBody attribute and take our CreatePostRequestDto that we call postDto.
    Now we will make a variable called postModel that we equal to our ToPostFromCreateDto().
    We will use the GetById method we created inside PostController before and return it with a new id and our (CreatePostRequestDto)postModel.
    It should look like this:
    [HttpPost]
        public IActionResult Create([FromBody] CreatePostRequestDto postDto)
        {
            var postModel = postDto.ToPostFromCreateDto();
            _context.Add(postModel);
            _context.SaveChanges();
            return CreatedAtAction(nameof(GetById), new { id = postModel.Id }, postModel.ToPostDto());
        }

    Now try it out with dotnet watch run. Because we created this with our CreatePostRequestDto we can see that our Id and Comments are not showing up.
    This is good for both us and the Frontend developer who will be sending in data, because it provides a clear specification of what we want.
    Try executing the JSON in Swagger, you can change some data if you want (Title and Body).